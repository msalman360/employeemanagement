<!-- start: page -->
<div class="row">
  <div class="col-lg-3">
    <div class="profile-card">
      <h4>Profile Information</h4>
      <div style="display: flex;align-items: center">
        <img src="<%= asset_path 'avatar5.png' %>" alt="Joseph Doe" class="img-fluid" data-lock-picture="<%= asset_path '!logged-user.jpg' %>" />
        <canvas id="canvas" style="margin-left: 28%">
        </canvas>
      </div>
      <% employee = Employee.find_by(email: current_user.email) %>
      <span style="color: #3498db;">Name:</span><span> <%= employee.employee_name %></span><br>
      <span style="color: #3498db;">Designation:</span><span> <%= employee.designation_id %></span><br>
      <span style="color: #3498db;">Shift:</span><span> <%= employee.roster.name %></span><br>
    </div>
  </div>

  <%
      email = current_user.email
      employee = Employee.find_by(email: email)

      if employee.present?
        start_of_month = Time.current.beginning_of_month
        end_of_month = Time.current.end_of_month
        attendances = Attendance.where(employee_id: employee.id, start_time: start_of_month..end_of_month)

        total_worked_hours = attendances.sum do |attendance|
          if attendance.start_time.present? && attendance.end_time.present?
            (attendance.end_time - attendance.start_time) / 3600
          else
            0
          end
        end
        total_worked_days = attendances.map(&:date).uniq.size
      else
        total_worked_hours = 0
        total_worked_days = 0
      end
  %>

  <div class="col-lg-3">
    <div class="attendance-card">
      <h4>Working Hours Attendance</h4>
      <div class="icon-container">
        <div>
          <i class="fas fa-clock icon"></i>
          <p>Total Hours Worked</p>
          <p class="fw-bold"><%= total_worked_hours %></p>
        </div>
        <div>
          <i class="fas fa-calendar-alt icon"></i>
          <p>Days Worked</p>
          <p class="fw-bold"><%= total_worked_days %></p>
        </div>
      </div>
    </div>
  </div>
  <div class="col-lg-3">
    <div class="profile-card">
      <h4>Start Time / End Time</h4>
      <div class="row mt-5">
        <button id="start-button" class="three-d-button">Start</button>
        <button id="stop-button" class="three-d-button" style="display: none;">Stop</button>
        <input type="hidden" id="start-time" name="start_time" value="">
        <input type="hidden" id="end-time" name="end_time" value="">
      </div>

    </div>
  </div>

</div>
<script>
    const canvas = document.getElementById("canvas");
    const ctx = canvas.getContext("2d");

    // Set canvas size based on device pixel ratio
    const pixelRatio = window.devicePixelRatio || 1;
    const canvasSize = 100; // Adjust as needed
    canvas.width = canvasSize * pixelRatio;
    canvas.height = canvasSize * pixelRatio;
    canvas.style.width = canvasSize + "px";
    canvas.style.height = canvasSize + "px";
    ctx.scale(pixelRatio, pixelRatio);

    let radius = canvasSize / 2;
    ctx.translate(radius, radius);
    radius = radius * 0.90;

    setInterval(drawClock, 1000);

    function drawClock() {
        ctx.clearRect(-canvasSize / 2, -canvasSize / 2, canvasSize, canvasSize);
        drawFace(ctx, radius);
        drawNumbers(ctx, radius);
        drawTime(ctx, radius);
    }

    function drawFace(ctx, radius) {
        const grad = ctx.createRadialGradient(0, 0, radius * 0.95, 0, 0, radius * 1.05);
        grad.addColorStop(0, '#d9d9d9'); // Light gray
        grad.addColorStop(0.5, '#ffffff'); // White
        grad.addColorStop(1, '#d9d9d9'); // Light gray
        ctx.beginPath();
        ctx.arc(0, 0, radius, 0, 2 * Math.PI);
        ctx.fillStyle = grad;
        ctx.fill();
        ctx.lineWidth = radius * 0.1;
        ctx.strokeStyle = '#999'; // Dark gray border
        ctx.stroke();
        ctx.beginPath();
        ctx.arc(0, 0, radius * 0.1, 0, 2 * Math.PI);
        ctx.fillStyle = '#555'; // Dark gray center
        ctx.fill();
    }

    function drawNumbers(ctx, radius) {
        ctx.font = "bold " + radius * 0.15 + "px Arial";
        ctx.fillStyle = "#555"; // Dark gray
        ctx.textBaseline = "middle";
        ctx.textAlign = "center";
        for (let num = 1; num < 13; num++) {
            let ang = num * Math.PI / 6;
            ctx.rotate(ang);
            ctx.translate(0, -radius * 0.85);
            ctx.rotate(-ang);
            ctx.fillText(num.toString(), 0, 0);
            ctx.rotate(ang);
            ctx.translate(0, radius * 0.85);
            ctx.rotate(-ang);
        }
    }

    function drawTime(ctx, radius) {
        const now = new Date();
        let hour = now.getHours();
        let minute = now.getMinutes();
        let second = now.getSeconds();

        // hour
        hour = hour % 12;
        hour = (hour * Math.PI / 6) +
          (minute * Math.PI / (6 * 60)) +
          (second * Math.PI / (360 * 60));
        drawHand(ctx, hour, radius * 0.5, radius * 0.07, '#333');

        // minute
        minute = (minute * Math.PI / 30) + (second * Math.PI / (30 * 60));
        drawHand(ctx, minute, radius * 0.8, radius * 0.07, '#333');

        // second
        second = (second * Math.PI / 30);
        drawHand(ctx, second, radius * 0.9, radius * 0.02, '#FF0000'); // Red for seconds hand
    }

    function drawHand(ctx, pos, length, width, color) {
        ctx.beginPath();
        ctx.lineWidth = width;
        ctx.lineCap = "round";
        ctx.strokeStyle = color;
        ctx.shadowColor = color;
        ctx.shadowBlur = 10; // Add shadow for a 3D effect
        ctx.moveTo(0, 0);
        ctx.rotate(pos);
        ctx.lineTo(0, -length);
        ctx.stroke();
        ctx.rotate(-pos);
        ctx.shadowBlur = 0; // Reset shadow after drawing the hand
    }
</script>
<style>
    body {
        background-color: #f5f5f5;
        font-family: 'Roboto', sans-serif;
    }

    .profile-card, .attendance-card, .clock-card {
        background-color: #fff;
        width: 100%;
        height: 100%;
        margin-bottom: 20px;
        padding: 20px;
        border-radius: 15px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    @media (max-width: 767px) {
        .profile-card, .attendance-card, .clock-card {
            width: 100%;
            height: auto;

        }

        .icon-container {
            margin-top: 15px;
        }
    }

    .profile-card img {
        width: 100px;
        height: 100px;
        border-radius: 50%;
        margin-bottom: 15px;
    }

    h4 {
        color: #333;
    }

    .icon-container {
        display: flex;
        justify-content: space-around;
        margin-top: 90px;
    }

    .icon {
        font-size: 32px;
        color: #3498db;
    }

    .icon-container div {
        text-align: center;
    }

    .icon-container p {
        margin: 5px 0 0;
        color: #555;
    }
</style>

<!-- start: page -->

<!-- end: page -->




<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
<style>
    #swipe-container {
        position: relative;
        width: 100%;
        height: 50px;
        background-color: #e9ecef;
        overflow: hidden;
        border-radius: 25px;
    }

    #swipe-button {
        width: 50px;
        height: 50px;
        background-color: #007bff;
        border-radius: 50%;
        cursor: pointer;
        position: absolute;
        z-index: 1;
        left: 0;
        transition: left 0.1s ease-out;
    }

    #placeholder-text {
        position: absolute;
        width: 100%;
        top: 25%;
        text-align: center;
        transition: transform 0.3s ease-out;
    }

    .arrow {
        position: absolute;
        top: 23%;
        color: #007bff;
        cursor: pointer;
        opacity: 1;
        transition: opacity 0.3s ease-out, transform 0.3s ease-out;
        animation: moveArrows 1s linear infinite;
    }

    #arrow-right1 {
        right: 10px;
        transform: translateX(0);
    }

    #arrow-right2 {
        right: 30px;
        transform: translateX(40px);
    }

    #arrow-right3 {
        right: 50px;
        transform: translateX(80px);
    }

    #swipe-container.swiped #placeholder-text {
        transform: translateX(-100%);
    }

    #swipe-container.swiped .arrow {
        opacity: 0;
    }

    @keyframes moveArrows {
        0%, 100% {
            transform: translateX(0);
        }
        50% {
            transform: translateX(10px);
        }
    }
</style>



<style>
    .three-d-button {
        display: inline-block;
        padding: 10px 20px;
        font-size: 18px;
        text-align: center;
        cursor: pointer;
        border: none;
        background: linear-gradient(45deg, #3498db, #2980b9);
        color: #fff;
        border-radius: 5px;
        position: relative;
        overflow: hidden;
        transition: all 0.3s;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .three-d-button:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
    }

    .three-d-button:before {
        content: '';
        position: absolute;
        top: -10%;
        left: -10%;
        width: 120%;
        height: 120%;
        background: rgba(255, 255, 255, 0.2);
        transition: all 0.3s;
        transform: rotate(45deg);
        pointer-events: none;
    }

    .three-d-button:hover:before {
        top: -20%;
        left: -20%;
    }

    #counter-container {
        text-align: center;
        font-family: 'Arial', sans-serif;
        margin-top: 10px;
        font-size: 20px;
    }

    .counter-label {
        margin-bottom: 5px;
    }

    .counter-value {
        font-size: 24px;
        font-weight: bold;
        color: #3498db; /* Blue color */
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const startButton = document.getElementById('start-button');
        const stopButton = document.getElementById('stop-button');
        const startTimeInput = document.getElementById('start-time');
        const endTimeInput = document.getElementById('end-time');

        // Retrieve the start time from local storage if available
        let startTime = localStorage.getItem('startTime');

        if (startTime) {
            // If start time is present, hide the Start button and show the Stop button
            startButton.style.display = 'none';
            stopButton.style.display = 'inline-block';
        }

        startButton.addEventListener('click', function () {
            // Store the start time when the Start button is clicked
            startTime = new Date().toISOString();
            startTimeInput.value = startTime;

            // Save start time in local storage
            localStorage.setItem('startTime', startTime);

            // Make an AJAX request to store the start time on the server
            const csrfToken = document.querySelector('meta[name="csrf-token"]').content;

            fetch('/attendance', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': csrfToken,
                },
                body: JSON.stringify({
                    start_time: startTime,
                }),
            })
              .then(response => response.json())
              .then(data => {
                  // Handle the response if needed
                  console.log(data);
              })
              .catch(error => {
                  console.error('Error:', error);
              });

            // Show the Stop button and hide the Start button
            startButton.style.display = 'none';
            stopButton.style.display = 'inline-block';
        });

        stopButton.addEventListener('click', function () {
            // Store the end time when the Stop button is clicked
            const endTime = new Date().toISOString();
            endTimeInput.value = endTime;

            // Make an AJAX request to store the end time on the server
            const csrfToken = document.querySelector('meta[name="csrf-token"]').content;

            fetch('/attendance', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': csrfToken,
                },
                body: JSON.stringify({
                    end_time: endTime,
                }),
            })
              .then(response => response.json())
              .then(data => {
                  // Handle the response if needed
                  console.log(data);
              })
              .catch(error => {
                  console.error('Error:', error);
              });

            // Remove the start time from local storage
            localStorage.removeItem('startTime');

            // Show the Start button and hide the Stop button
            startButton.style.display = 'inline-block';
            stopButton.style.display = 'none';
        });
    });

</script>
